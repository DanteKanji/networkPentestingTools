#!/usr/bin/env python
import scapy.all as scapy
import argparse

def getMAC(ip):
    arpReq = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arpReqBroadcast = broadcast/arpReq
    answeredList = scapy.srp(arpReqBroadcast, timeout=1, verbose=False)[0]
    try:
        return answeredList[0][1].hwsrc
    except IndexError:
        print("\nTarget not found.  Retrying...")

def getArgs():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--interface", dest="iface", help="Interface to use on attack machine")
    args = parser.parse_args()
    if not args.iface:
        print("\nMust specify an interface.  Please type 'arpSpoof -h' for guidance on this utility.  Exiting program...\n")
        exit()
    else:
        return args

def sniff(interface):
    scapy.sniff(iface=interface, store=False, prn=processSniffedPkt)

def processSniffedPkt(pkt):
    if pkt.haslayer(scapy.ARP) and pkt[scapy.ARP].op == 2:
        try:
            realMac = getMAC(pkt[scapy.ARP].psrc)
            responseMac = pkt[scapy.ARP].hwsrc

            if realMac != responseMac:
                print("[+] ARP Spoofing Attack Detected")
        except IndexError:
            pass

opt = getArgs()
sniff(opt.iface)