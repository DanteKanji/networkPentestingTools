#!/usr/bin/env python
import scapy.all as scapy
import argparse
import subprocess
import re

def getArgs():
        parser = argparse.ArgumentParser()
        parser.add_argument("-t", "--target", dest="tgt", help="Target IP / IP range.")
        parser.add_argument("-i", "--interface", dest="iface", help="Target IP / IP range.")
        args = parser.parse_args()
        if not args.iface:
            print("\nYou must specify an interface with '-i'. Exiting program,,,\n")
            exit()
        elif not args.tgt:
            ifconfigresult=subprocess.check_output(["ifconfig", args.iface])
            ipSearchResult = re.search(r"\d+\.\d+\.\d+\.\d+", str(ifconfigresult))
            if ipSearchResult:
                args.tgt=ipSearchResult.group(0)+"/24"
            else:
                print("Could not obtain host IP.")

        ipCheck = re.search(r"\d+\.\d+\.\d+\.\d+\/24$", str(args.tgt))

        if ipCheck == None:
            ipCheckSingle = re.search(r"\d+\.\d+\.\d+\.\d+$", str(args.tgt))
            if ipCheckSingle == None:
                print("Invalid entry.  Please use a single IP or a /24 network.")
                exit()
            else:
                return args
        else:
            return args
def scan(ip):
    arpReq = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arpReqBroadcast = broadcast/arpReq
    answeredList = scapy.srp(arpReqBroadcast, timeout=1, verbose=False)[0]

    clientsDict = dict()
    for element in answeredList:
        targetDict = {"ip": element[1].psrc, "mac": element[1].hwsrc}
        clientsDict[element[1].psrc] = targetDict
    return clientsDict
def printResult(dict):
    print("IP\t\t\tMAC Address\n------------------------------------------------")
    for client in dict:
        print(dict[client]["ip"]+"\t\t"+dict[client]["mac"])
        print("------------------------------------------------")

opts = getArgs()
scanResult = scan(opts.tgt)
printResult(scanResult)
